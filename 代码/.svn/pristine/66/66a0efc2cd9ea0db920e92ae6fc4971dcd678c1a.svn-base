<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>手写JS</title>
  </head>
  <body>
    <script>
      /*
        数组排序 --> 快速排序
        函数的节流(throttle)与防抖(debounce)
          作用：为了节约函数的性能（让函数调用次数更少）
          节流(throttle)：让函数在单位时间内只调用一次，第一次调用生效
          防抖(debounce)：让函数在单位时间内只调用一次，最后一次调用生效
      */

      function quickSort(arr) {
        // 数组长度
        var length = arr.length;
        // 退出条件
        // 如果if里面代码只有一行，可以省略大括号
        if (length <= 1) return arr;

        // 基准值下标
        var index = Math.floor(length / 2);
        // 找到基准值（中间值）
        var value = arr.splice(index, 1)[0];

        var left = [];
        var right = [];

        arr.forEach(function (item) {
          /* 
            if (item < value) left.push(item);
            else right.push(item);
          */
          if (item < value) {
            // 比基准值小的放左边数组
            left.push(item);
            return;
          }
          // 比基准值大的放右边数组
          right.push(item);
        });

        // 对左边数组再来一次快排
        const newLeft = quickSort(left);
        // 对右边数组再来一次快排
        const newRight = quickSort(right);

        return newLeft.concat([value], newRight);
      }

      var arr = [5, 6, 8, 1, 3, 5, 4, 7, 3, 9, 5, 2];

      // console.log(quickSort(arr));

      function throttle(fn, time) {}
      
      function debounce(fn, time) {}

    </script>
  </body>
</html>
