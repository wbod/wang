<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>06_箭头函数</title>
  </head>
  <body>
    <button id="btn1">测试箭头函数this_1</button>
    <button id="btn2">测试箭头函数this_2</button>
    <!--
* 作用: 定义匿名函数
* 基本语法:
  * 没有参数: () => console.log('xxxx')
  * 一个参数: i => i+2
  * 大于一个参数: (i,j) => i+j
  * 函数体不用大括号: 默认返回结果
  * 函数体如果有多个语句, 需要用{}包围，若有需要返回的内容，需要手动返回
* 使用场景: 多用来定义回调函数

* 箭头函数的特点：
    1、简洁
    2、箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，而是在定义的时候处在的对象就是它的this
    3、扩展理解： 箭头函数的this看外层的是否有函数，
        如果有，外层函数的this就是内部箭头函数的this，
        如果没有，则this是window。
-->
    <script type="text/javascript">
      // 箭头函数
      const fn1 = () => {};
      // 参数只有一个时，才可以省略()
      const fn2 = (x) => {};
      // 只有一条语句时，才可以省略{}
      // 如果省略{}，会将这条语句的返回值return出去
      const fn3 = (x, y) => x + y;
      const fn4 = (x, y) => {
        // return x + y
        x + y;
      };
      console.log(fn3(1, 2)); // 3
      console.log(fn4(1, 2)); // undefined

      // 箭头函数的this指向：没有自己的this，指向它外层全局/函数作用域指向的this
      // 没有自己的arguments，指向它外层全局/函数作用域指向的arguments
      const person = { name: "jerry" };

      function fn5() {
        console.log("fn5", this);
        function fn6() {
          console.log("fn6", this);
          const fn7 = (a, b, c) => {
            console.log(a, b, c); // 4 5 6
            console.log(arguments); // [1, 2, 3]
            console.log("fn7", this);
          };
          // fn7.call(window, 1, 2, 3);
          fn7(4, 5, 6);
        }
        fn6.call(person, 1, 2, 3);
      }
      fn5();

      /*
        箭头函数没有显示原型属性，不能被new调用
        箭头函数有隐式原型属性
      */
      const fn6 = () => {};
      console.log(fn6.prototype); 
      console.log(fn6.__proto__ === Function.prototype); // true
      
      // new fn6() // Uncaught TypeError: fn6 is not a constructor

      /*
        箭头函数：
          1. 没有自己的this，指向它外层全局/函数作用域指向的this
          2. 没有自己的arguments，指向它外层全局/函数作用域指向的arguments
          3. 箭头函数没有显示原型属性，不能被new调用
             箭头函数有隐式原型属性，可以call/apply等方法，但是没有意义
          4. 箭头函数再书写时可以简写：
            参数只有一个时，才可以省略()
            只有一条语句时，才可以省略{}
              如果省略{}，会将这条语句的返回值return出去

        总结this指向：
          普通函数
            直接调用 指向window 
              再ES5严格模式下，指向undefined
            隐式调用 指向调用函数的对象
            显示调用（call/apply） 指向传入第一个参数
            new 调用 指向生成实例对象  
          回调函数
            定时器回调函数 window
            DOM事件回调函数 绑定事件的DOM元素
          箭头函数     
            它外层全局/函数作用域指向的this
      */
      // 'use strict';
      // document.onclick = () => {
      //   console.log(this);
      // }

      const fn8 = () => {
        console.log(this); 
      }
      fn8();

    </script>
  </body>
</html>
