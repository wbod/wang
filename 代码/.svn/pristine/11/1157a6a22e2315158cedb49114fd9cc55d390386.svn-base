<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Iterator遍历器</title>
</head>
<body>
  <!--
    概念： iterator是一种接口机制，为各种不同的数据结构提供统一的访问机制
    作用：
      1、为各种数据结构，提供一个统一的、简便的访问接口；
      2、使得数据结构的成员能够按某种次序排列；
      3、ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。
    工作原理：
      - 创建一个指针对象(遍历器对象)，指向数据结构的起始位置。
      - 第一次调用next方法，指针自动指向数据结构的第一个成员
      - 接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员
      - 每调用next方法返回的是一个包含value和done的对象，{value: 当前成员的值,done: 布尔值}
        * value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。
        * 当遍历结束的时候返回的value值是undefined，done值为false
    原生具备iterator接口的数据(可用for of遍历)
      1、Array
      2、arguments
      3、set容器
      4、map容器
      5、String
      。。。
  -->
  <div></div>
  <div></div>
  <div></div>

  <script type="text/javascript">
    function iterator(arr) {
      let index = 0;
      let length = arr.length;
      // 对象简写方式
      return {
        next() {
          return index >= length ? {value: undefined, done: true} : {value: arr[index++], done: false};
        }
      }
    }

    const arr = [1, 2, 3, 4];

    const iteratorObj = iterator(arr);
    console.log(iteratorObj.next());
    console.log(iteratorObj.next());
    console.log(iteratorObj.next());
    console.log(iteratorObj.next());
    console.log(iteratorObj.next());

    console.log(arr);
    // iterator是一个接口机制，为了让所有数据用统一的方式遍历（ for of ）
    // 通过查看数据类型上是否有Symbol(Symbol.iterator)方法
    // String 、Array、Set、Map、 arguments、dom元素集合（querySelectorAll）
    for (let value of arr) {
      console.log(value);
    }

    const str = 'atguigu';
    for (let value of str) {
      console.log(value);
    }

    const obj = {name: 'jack'};
    /*
    const s1 = Symbol();
    for (let value of s1) {
      console.log(value);
    }*/

    function fn() {
      console.log(arguments);
      console.log(...arguments);
    }
    fn(1, 2, 3, 4, 5);

    const divs = document.querySelectorAll('div');
    console.log(divs);
    console.log(...divs);

    console.log(arr);
    console.log(str);
    console.log(obj);

    console.log(...arr); // ...运算符底层调用的是iterator接口进行遍历的
    console.log(...str);
    // console.log(...obj);
    /*
    forEach 只能数组使用，推荐使用
    for 只能数组使用, 性能最好
    while / do while 任意值使用
    for in 通常用于对象
    for of 当你不确定要遍历的是什么数据类型。这时候用for of
   */

  </script>
</body>
</html>