<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>11_Promise对象</title>
  </head>
  <body>
    <!--
      1. 理解:
        * Promise对象: 代表了未来某个将要发生的事件(通常是一个异步操作)
        * 有了promise对象, 可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(俗称'回调地狱')
        * ES6的Promise是一个构造函数, 用来生成promise实例
      2. 使用promise基本步骤(2步):
        * 创建promise对象
          let promise = new Promise((resolve, reject) => {
            //初始化promise状态为 pending
            //执行异步操作
            if(异步操作成功) {
              resolve(value); // 修改promise的状态为fullfilled
            } else {
              reject(errMsg); // 修改promise的状态为rejected
            }
          })
        * 调用promise的then()
          promise.then(function(
            result => console.log(result),
            errorMsg => alert(errorMsg)
          ))
      3. promise对象的3个状态
        * pending: 初始化状态
        * fullfilled: 成功状态
        * rejected: 失败状态
      4. 应用:
        * 使用promise实现超时处理
        * 使用promise封装处理ajax请求
    -->
    <script type="text/javascript">
      // 回调函数嵌套多层回调函数 --> 回调地狱
      /* setTimeout(() => {
        console.log("a数据请求回来了~");
        setTimeout(() => {
          console.log("b数据请求回来了~");
          setTimeout(() => {
            console.log("c数据请求回来了~");
          }, 3000);
        }, 2000);
      }, 1000); */

      // 创建promise
      /*
        promise对象有三种状态：代表异步执行
          pending  初始化状态（异步代码还在执行中）
          resolved / fulfilled 成功状态（异步代码执行成功了）
          rejected 失败状态（异步代码执行失败了）

        resolve 调用resolve函数，可以将promise对象的状态由pending变成resolved
        reject 调用reject函数，可以将promise对象的状态由pending变成rejected

        注意：promise的状态只能修改一次
      */

      const promise = new Promise((resolve, reject) => {
        // 同步调用
        // 执行异步操作/异步代码
        setTimeout(() => {
          console.log("setTimeout()");
          // console.log(333);
          reject("失败了~");
          // resolve('a数据');
        }, 1000);
      });

      /*
        Promise.prototype.then
        Promise.prototype.catch

        then / catch 方法返回值是一个新的promise对象
        新promise对象默认是成功状态
        如果 then / catch 接受的函数返回值是一个promise对象
        那么 then / catch 方法返回值的promise就是这个promise对象

        总结：
          如果你返回了promise对象，就是这个promise对象
          如果没有返回 promise对象，就会新建一个默认成功状态promise
            内部如果报错了，返回一个失败状态的promise
      */
      /* promise.then(
        (result) => { // 成功的回调
          // 当promise对象的状态变成resolved，就会执行当前函数
          // console.log("resolved 111");
          console.log(result);
        },
        (error) => { // 失败的回调
          // 当promise对象的状态变成rejected，就会执行当前函数
          // console.log("rejected 111");
          console.log(error);
        }
      ); */

      promise
        .then((result) => {
          // 成功的回调
          // 当promise对象的状态变成resolved，就会执行当前函数
          // console.log("resolved 111");
          console.log("result111", result);
          return 222;
          // return new Promise(() => {})
        })
        .catch((error) => {
          // 失败的回调
          console.log("error", error);
          // return 222;
          return new Promise((resolve, reject) => {
            // resolve(222);
            // reject(222);
          });
          // throw new Error('报错了~');
        })
        // 下一个then/catch方法接受的参数，看上一个then/catch方法的返回值
        .then((result) => {
          console.log("result222", result);
        })
        .catch((error) => {
          console.log("error222", error);
        });

      console.log(promise);
    </script>
  </body>
</html>
